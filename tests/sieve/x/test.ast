Program Eratosthenes
    Variables:
        topnum: INTEGER
    Subroutines:
        FUNCTION abs(REAL x) : REAL
            Statements:
                If (x < 0) Then
                    Statements:
                        Return (-x)
                Else
                    Statements:
                        Return x
                Fi
                Return 0
        FUNCTION integersqrt(INTEGER a) : INTEGER
            Statements:
                Select TRUE
                  Case (a < 0):
                        Statements:
                            Output('a < 0 in FUNCTION integersqrt.')
                            EXIT
                  Case (a == 0):
                        Statements:
                            Return 0
                  Case (a > 0):
                        Variables:
                            x, ra: REAL
                            epsilon: REAL
                            sqrt: INTEGER
                        Statements:
                            Assign ra := FLOAT(a)
                            Assign epsilon := (1e-07 * ra)
                            For x := (ra / 2.0) By (((ra / x) - x) / 2.0) While (abs((ra - (x * x))) > epsilon) Do
                                Statements:
                                    Empty
                            End For
                            For sqrt := (FIX(x) - 1) By 1 While (((sqrt + 1) * (sqrt + 1)) <= a) Do
                                Statements:
                                    Empty
                            End For
                            Return sqrt
                End Select
                Return 0
    Statements:
        Input(topnum)
        If (topnum > 0) Then
            Variables:
                sieve: ARRAY[1:topnum] OF BOOLEAN
                i, limit, count: INTEGER
            Statements:
                Assign topnum := (topnum + 1)
                For i := 1 To topnum Do
                    Statements:
                        Assign sieve[i] := TRUE
                End For
                Assign limit := (integersqrt(topnum) + 1)
                For i := 2 To limit Do
                    Statements:
                        If sieve[i] Then
                            Variables:
                                j: INTEGER
                            Statements:
                                For j := (2 * i) By i To topnum Do
                                    Statements:
                                        Assign sieve[j] := FALSE
                                End For
                        Fi
                End For
                Assign count := 0
                For i := 1 To topnum Do
                    Statements:
                        If sieve[i] Then
                            Statements:
                                Assign count := (count + 1)
                                Output(concat(4, 'Prime[', str(count), '] = ', str(i)))
                        Fi
                End For
        Else
            Statements:
                Output(concat(3, 'Input value ', str(topnum), ' non-positive.'))
        Fi
        EXIT
