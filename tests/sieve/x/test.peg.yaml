  - type: program_segment
    main:
      type: main_program
      name: Eratosthenes
      body:
        type: segment_body
        variable_declarations:
          - type: variable_declaration
            names: topnum
            t:
              type: type
              basic_type: INTEGER
        subroutine_definitions:
          - type: function_definition
            name:
              type: procedure_name
              params:
                type: internal_parameter_list
                head:
                  type: internal_parameter
                  id: x
                  parameter_type:
                    type: type
                    basic_type: REAL
            return_type:
              type: type
              basic_type: REAL
            body:
              type: segment_body
              statements:
                - type: simple_conditional_statement
                  cond:
                    type: rel_expr
                    head:
                      type: variable
                      base: x
                      parts: []
                    op: <
                    rhs: '0'
                  then_body:
                    type: segment_body
                    statements:
                      - type: return_statement
                        value:
                          type: unary
                          op: '-'
                          expr:
                            type: variable
                            base: x
                            parts: []
                  else_body:
                    type: segment_body
                    statements:
                      - type: return_statement
                        value:
                          type: variable
                          base: x
                          parts: []
            end_name: abs
          - type: function_definition
            name:
              type: procedure_name
              params:
                type: internal_parameter_list
                head:
                  type: internal_parameter
                  id: a
                  parameter_type:
                    type: type
                    basic_type: INTEGER
            return_type:
              type: type
              basic_type: INTEGER
            body:
              type: segment_body
              statements:
                - type: simple_selection
                  sel:
                    type: variable
                    base: 'TRUE'
                    parts: []
                  body:
                    type: selection_body
                    sel:
                      - type: selector
                        head:
                          type: rel_expr
                          head:
                            type: variable
                            base: a
                            parts: []
                          op: <
                          rhs: '0'
                      - type: selector
                        head:
                          type: rel_expr
                          head:
                            type: variable
                            base: a
                            parts: []
                          op: '='
                          rhs: '0'
                      - type: selector
                        head:
                          type: rel_expr
                          head:
                            type: variable
                            base: a
                            parts: []
                          op: '>'
                          rhs: '0'
                    body:
                      - type: segment_body
                        statements:
                          - type: output_statement
                            list:
                              - '"a < 0 in FUNCTION integersqrt."'
                      - type: segment_body
                        statements:
                          - type: return_statement
                            value: '0'
                      - type: segment_body
                        variable_declarations:
                          - type: variable_declaration
                            names:
                              type: declared_multiple_names
                              head: x
                              tail: ra
                            t:
                              type: type
                              basic_type: REAL
                          - type: variable_declaration
                            names: epsilon
                            t:
                              type: type
                              basic_type: REAL
                          - type: variable_declaration
                            names: sqrt
                            t:
                              type: type
                              basic_type: INTEGER
                        statements:
                          - type: assignment_statement
                            targets:
                              - type: target
                                var:
                                  type: variable
                                  base: ra
                                  parts: []
                            expr:
                              type: function_reference
                              fn:
                                type: function_identifier
                                name: FLOAT
                              head:
                                type: variable
                                base: a
                                parts: []
                          - type: assignment_statement
                            targets:
                              - type: target
                                var:
                                  type: variable
                                  base: epsilon
                                  parts: []
                            expr:
                              type: mul_expr
                              head: '0.0000001'
                              op: '*'
                              rhs:
                                type: variable
                                base: ra
                                parts: []
                          - type: simple_iteration_statement
                            tgt:
                              type: iteration_target
                              var:
                                type: variable
                                base: x
                                parts: []
                            ctrl:
                              type: control
                              init:
                                type: mul_expr
                                head:
                                  type: variable
                                  base: ra
                                  parts: []
                                op: /
                                rhs: '2.'
                              step:
                                type: step
                                value:
                                  type: mul_expr
                                  head:
                                    type: add_expr
                                    head:
                                      type: mul_expr
                                      head:
                                        type: variable
                                        base: ra
                                        parts: []
                                      op: /
                                      rhs:
                                        type: variable
                                        base: x
                                        parts: []
                                    op: '-'
                                    rhs:
                                      type: variable
                                      base: x
                                      parts: []
                                  op: /
                                  rhs: '2.'
                              cond:
                                type: rel_expr
                                head:
                                  type: function_reference
                                  fn:
                                    type: function_identifier
                                    name: abs
                                  head:
                                    type: add_expr
                                    head:
                                      type: variable
                                      base: ra
                                      parts: []
                                    op: '-'
                                    rhs:
                                      type: mul_expr
                                      head:
                                        type: variable
                                        base: x
                                        parts: []
                                      op: '*'
                                      rhs:
                                        type: variable
                                        base: x
                                        parts: []
                                op: '>'
                                rhs:
                                  type: variable
                                  base: epsilon
                                  parts: []
                            body:
                              type: segment_body
                              statements:
                                - ;
                          - type: simple_iteration_statement
                            tgt:
                              type: iteration_target
                              var:
                                type: variable
                                base: sqrt
                                parts: []
                            ctrl:
                              type: control
                              init:
                                type: add_expr
                                head:
                                  type: function_reference
                                  fn:
                                    type: function_identifier
                                    name: FIX
                                  head:
                                    type: variable
                                    base: x
                                    parts: []
                                op: '-'
                                rhs: '1'
                              step:
                                type: step
                                value: '1'
                              cond:
                                type: rel_expr
                                head:
                                  type: mul_expr
                                  head:
                                    type: add_expr
                                    head:
                                      type: variable
                                      base: sqrt
                                      parts: []
                                    op: +
                                    rhs: '1'
                                  op: '*'
                                  rhs:
                                    type: add_expr
                                    head:
                                      type: variable
                                      base: sqrt
                                      parts: []
                                    op: +
                                    rhs: '1'
                                op: <=
                                rhs:
                                  type: variable
                                  base: a
                                  parts: []
                            body:
                              type: segment_body
                              statements:
                                - ;
                          - type: return_statement
                            value:
                              type: variable
                              base: sqrt
                              parts: []
                  end: END SELECT;
            end_name: integersqrt
        statements:
          - type: input_statement
            list:
              - type: variable
                base: topnum
                parts: []
          - type: simple_conditional_statement
            cond:
              type: rel_expr
              head:
                type: variable
                base: topnum
                parts: []
              op: '>'
              rhs: '10000'
            then_body:
              type: segment_body
              statements:
                - type: output_statement
                  list:
                    - type: concat_expr
                      head: '"Input value "'
                      tail:
                        - type: variable
                          base: topnum
                          parts: []
                        - '" too large."'
          - type: simple_conditional_statement
            cond:
              type: rel_expr
              head:
                type: variable
                base: topnum
                parts: []
              op: '>'
              rhs: '0'
            then_body:
              type: segment_body
              variable_declarations:
                - type: variable_declaration
                  names: sieve
                  t:
                    type: type
                    arrayed_type:
                      type: arrayed_type
                      lo: '1'
                      hi: '10000'
                      element_type:
                        type: type
                        basic_type: BOOLEAN
                - type: variable_declaration
                  names:
                    type: declared_multiple_names
                    head: i
                    tail:
                      - limit
                      - count
                  t:
                    type: type
                    basic_type: INTEGER
              statements:
                - type: assignment_statement
                  targets:
                    - type: target
                      var:
                        type: variable
                        base: topnum
                        parts: []
                  expr:
                    type: add_expr
                    head:
                      type: variable
                      base: topnum
                      parts: []
                    op: +
                    rhs: '1'
                - type: simple_iteration_statement
                  tgt:
                    type: iteration_target
                    var:
                      type: variable
                      base: i
                      parts: []
                  ctrl:
                    type: control
                    init: '1'
                    limit:
                      type: limit
                      value:
                        type: variable
                        base: topnum
                        parts: []
                  body:
                    type: segment_body
                    statements:
                      - type: assignment_statement
                        targets:
                          - type: target
                            var:
                              type: variable
                              base: sieve
                              parts:
                                - index:
                                    type: variable
                                    base: i
                                    parts: []
                        expr:
                          type: variable
                          base: 'TRUE'
                          parts: []
                - type: assignment_statement
                  targets:
                    - type: target
                      var:
                        type: variable
                        base: limit
                        parts: []
                  expr:
                    type: add_expr
                    head:
                      type: function_reference
                      fn:
                        type: function_identifier
                        name: integersqrt
                      head:
                        type: variable
                        base: topnum
                        parts: []
                    op: +
                    rhs: '1'
                - type: simple_iteration_statement
                  tgt:
                    type: iteration_target
                    var:
                      type: variable
                      base: i
                      parts: []
                  ctrl:
                    type: control
                    init: '2'
                    limit:
                      type: limit
                      value:
                        type: variable
                        base: limit
                        parts: []
                  body:
                    type: segment_body
                    statements:
                      - type: simple_conditional_statement
                        cond:
                          type: variable
                          base: sieve
                          parts:
                            - index:
                                type: variable
                                base: i
                                parts: []
                        then_body:
                          type: segment_body
                          variable_declarations:
                            - type: variable_declaration
                              names: j
                              t:
                                type: type
                                basic_type: INTEGER
                          statements:
                            - type: simple_iteration_statement
                              tgt:
                                type: iteration_target
                                var:
                                  type: variable
                                  base: j
                                  parts: []
                              ctrl:
                                type: control
                                init:
                                  type: mul_expr
                                  head: '2'
                                  op: '*'
                                  rhs:
                                    type: variable
                                    base: i
                                    parts: []
                                step:
                                  type: step
                                  value:
                                    type: variable
                                    base: i
                                    parts: []
                                limit:
                                  type: limit
                                  value:
                                    type: variable
                                    base: topnum
                                    parts: []
                              body:
                                type: segment_body
                                statements:
                                  - type: assignment_statement
                                    targets:
                                      - type: target
                                        var:
                                          type: variable
                                          base: sieve
                                          parts:
                                            - index:
                                                type: variable
                                                base: j
                                                parts: []
                                    expr:
                                      type: variable
                                      base: 'FALSE'
                                      parts: []
                - type: assignment_statement
                  targets:
                    - type: target
                      var:
                        type: variable
                        base: count
                        parts: []
                  expr: '0'
                - type: simple_iteration_statement
                  tgt:
                    type: iteration_target
                    var:
                      type: variable
                      base: i
                      parts: []
                  ctrl:
                    type: control
                    init: '1'
                    limit:
                      type: limit
                      value:
                        type: variable
                        base: topnum
                        parts: []
                  body:
                    type: segment_body
                    statements:
                      - type: simple_conditional_statement
                        cond:
                          type: variable
                          base: sieve
                          parts:
                            - index:
                                type: variable
                                base: i
                                parts: []
                        then_body:
                          type: segment_body
                          statements:
                            - type: assignment_statement
                              targets:
                                - type: target
                                  var:
                                    type: variable
                                    base: count
                                    parts: []
                              expr:
                                type: add_expr
                                head:
                                  type: variable
                                  base: count
                                  parts: []
                                op: +
                                rhs: '1'
                            - type: output_statement
                              list:
                                - type: concat_expr
                                  head: '"Prime["'
                                  tail:
                                    - type: variable
                                      base: count
                                      parts: []
                                    - '"] = "'
                                    - type: variable
                                      base: i
                                      parts: []
            else_body:
              type: segment_body
              statements:
                - type: output_statement
                  list:
                    - type: concat_expr
                      head: '"Input value "'
                      tail:
                        - type: variable
                          base: topnum
                          parts: []
                        - '" non-positive."'
      end_name: Eratosthenes
